{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\react-componentes-e-projetos-diversos\\\\todo-xstate-nextjs\\\\components\\\\Todo.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { todoMachine } from \"./todoMachine\";\nimport cn from \"classnames\";\nexport function Todo(_ref) {\n  _s();\n\n  var todo = _ref.todo,\n      onChange = _ref.onChange,\n      onDelete = _ref.onDelete,\n      onComplete = _ref.onComplete;\n  var inputRef = useRef(null);\n\n  var _useMachine = useMachine(todoMachine.withConfig({\n    actions: {\n      focusInput: function focusInput() {\n        setTimeout(function () {\n          inputRef.current && inputRef.current.select();\n        }, 0);\n      },\n      notifyDeleted: function notifyDeleted(ctx) {\n        onDelete(ctx.id);\n      },\n      notifyChanged: function notifyChanged(ctx) {\n        onChange({\n          id: ctx.id,\n          title: ctx.title,\n          completed: ctx.completed\n        });\n      }\n    }\n  }, todo // extended state\n  )),\n      _useMachine2 = _slicedToArray(_useMachine, 2),\n      state = _useMachine2[0],\n      send = _useMachine2[1];\n\n  useEffect(function () {\n    if (todo.completed !== completed) {\n      // \"Completed\" changed externally... ugh.\n      // React needs Actors.\n      send(\"TOGGLE_COMPLETE\");\n    }\n  }, [todo]);\n  var _state$context = state.context,\n      completed = _state$context.completed,\n      title = _state$context.title;\n  return __jsx(\"li\", {\n    className: cn({\n      editing: state.matches(\"editing\"),\n      completed: completed\n    }),\n    \"data-todo-state\": completed ? \"completed\" : \"active\",\n    key: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, __jsx(\"input\", {\n    className: \"toggle\",\n    type: \"checkbox\",\n    onChange: function onChange(_) {\n      send(\"TOGGLE_COMPLETE\");\n    },\n    value: completed,\n    checked: completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), __jsx(\"label\", {\n    onDoubleClick: function onDoubleClick(e) {\n      send(\"EDIT\");\n    },\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, title, \" - teste\"), \" \", __jsx(\"button\", {\n    className: \"destroy\",\n    onClick: function onClick() {\n      return send(\"DELETE\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  })), __jsx(\"input\", {\n    className: \"edit\",\n    value: title,\n    onBlur: function onBlur(_) {\n      return send(\"BLUR\");\n    },\n    onChange: function onChange(e) {\n      return send({\n        type: \"CHANGE\",\n        value: e.target.value\n      });\n    },\n    onKeyPress: function onKeyPress(e) {\n      if (e.key === \"Enter\") {\n        send(\"COMMIT\");\n      }\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === \"Escape\") {\n        send(\"CANCEL\");\n      }\n    },\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }\n  }));\n}\n\n_s(Todo, \"npdwME9M+EQ1YRn94s91Yvg/djw=\", false, function () {\n  return [useMachine];\n});\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["C:/Users/Alex/react-componentes-e-projetos-diversos/todo-xstate-nextjs/components/Todo.jsx"],"names":["React","useEffect","useRef","useMachine","todoMachine","cn","Todo","todo","onChange","onDelete","onComplete","inputRef","withConfig","actions","focusInput","setTimeout","current","select","notifyDeleted","ctx","id","notifyChanged","title","completed","state","send","context","editing","matches","_","e","color","type","value","target","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { todoMachine } from \"./todoMachine\";\nimport cn from \"classnames\";\n\nexport function Todo({ todo, onChange, onDelete, onComplete }) {\n\tconst inputRef = useRef(null);\n\tconst [state, send] = useMachine(\n\t\ttodoMachine.withConfig(\n\t\t\t{\n\t\t\t\tactions: {\n\t\t\t\t\tfocusInput() {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tinputRef.current && inputRef.current.select();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t},\n\t\t\t\t\tnotifyDeleted(ctx) {\n\t\t\t\t\t\tonDelete(ctx.id);\n\t\t\t\t\t},\n\t\t\t\t\tnotifyChanged(ctx) {\n\t\t\t\t\t\tonChange({\n\t\t\t\t\t\t\tid: ctx.id,\n\t\t\t\t\t\t\ttitle: ctx.title,\n\t\t\t\t\t\t\tcompleted: ctx.completed\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttodo // extended state\n\t\t)\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (todo.completed !== completed) {\n\t\t\t\t// \"Completed\" changed externally... ugh.\n\t\t\t\t// React needs Actors.\n\t\t\t\tsend(\"TOGGLE_COMPLETE\");\n\t\t\t}\n\t\t},\n\t\t[todo]\n\t);\n\n\tconst { completed, title } = state.context;\n\n\treturn (\n\t\t<li\n\t\t\tclassName={cn({\n\t\t\t\tediting: state.matches(\"editing\"),\n\t\t\t\tcompleted: completed\n\t\t\t})}\n\t\t\tdata-todo-state={completed ? \"completed\" : \"active\"}\n\t\t\tkey={todo.id}\n\t\t>\n\t\t\t<div className=\"view\">\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tonChange={_ => {\n\t\t\t\t\t\tsend(\"TOGGLE_COMPLETE\");\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={completed}\n\t\t\t\t\tchecked={completed}\n\t\t\t\t/>\n\t\t\t\t<label\n\t\t\t\t\tonDoubleClick={e => {\n\t\t\t\t\t\tsend(\"EDIT\");\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{ color: '#000' }}\n\t\t\t\t>\n\t\t\t\t\t{title} - teste\n\t\t\t\t</label>{\" \"}\n\t\t\t\t<button className=\"destroy\" onClick={() => send(\"DELETE\")} />\n\t\t\t</div>\n\t\t\t<input\n\t\t\t\tclassName=\"edit\"\n\t\t\t\tvalue={title}\n\t\t\t\tonBlur={_ => send(\"BLUR\")}\n\t\t\t\tonChange={e => send({ type: \"CHANGE\", value: e.target.value })}\n\t\t\t\tonKeyPress={e => {\n\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\tsend(\"COMMIT\");\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonKeyDown={e => {\n\t\t\t\t\tif (e.key === \"Escape\") {\n\t\t\t\t\t\tsend(\"CANCEL\");\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tref={inputRef}\n\t\t\t/>\n\t\t</li>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}