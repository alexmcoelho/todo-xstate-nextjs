{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Machine, assign, spawn } from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport { todoMachine } from \"./todoMachine\";\n\nconst createTodo = title => {\n  return {\n    id: uuid(),\n    title: title,\n    completed: false\n  };\n};\n\nexport const todosMachine = Machine({\n  id: \"todos\",\n  context: {\n    todo: \"\",\n    // new todo\n    todos: []\n  },\n  initial: \"initializing\",\n  states: {\n    initializing: {\n      entry: assign({\n        todos: (ctx, e) => {\n          return ctx.todos.map(todo => _objectSpread(_objectSpread({}, todo), {}, {\n            ref: spawn(todoMachine.withContext(todo))\n          }));\n        }\n      }),\n      on: {\n        \"\": \"all\"\n      }\n    },\n    all: {},\n    active: {},\n    completed: {}\n  },\n  on: {\n    \"NEWTODO.CHANGE\": {\n      actions: assign({\n        todo: (ctx, e) => e.value\n      })\n    },\n    \"NEWTODO.COMMIT\": {\n      actions: [assign({\n        todo: \"\",\n        // clear todo\n        todos: (ctx, e) => {\n          const newTodo = createTodo(e.value.trim());\n          return ctx.todos.concat(_objectSpread(_objectSpread({}, newTodo), {}, {\n            ref: spawn(todoMachine.withContext(newTodo))\n          }));\n        }\n      }), \"persist\"],\n      cond: (ctx, e) => e.value.trim().length\n    },\n    \"TODO.COMMIT\": {\n      actions: [assign({\n        todos: (ctx, e) => ctx.todos.map(todo => {\n          return todo.id === e.todo.id ? _objectSpread(_objectSpread(_objectSpread({}, todo), e.todo), {}, {\n            ref: todo.ref\n          }) : todo;\n        })\n      }), \"persist\"]\n    },\n    \"TODO.DELETE\": {\n      actions: [assign({\n        todos: (ctx, e) => ctx.todos.filter(todo => todo.id !== e.id)\n      }), \"persist\"]\n    },\n    \"SHOW.all\": \".all\",\n    \"SHOW.active\": \".active\",\n    \"SHOW.completed\": \".completed\",\n    \"MARK.completed\": {\n      actions: ctx => {\n        ctx.todos.forEach(todo => todo.ref.send(\"SET_COMPLETED\"));\n      }\n    },\n    \"MARK.active\": {\n      actions: ctx => {\n        ctx.todos.forEach(todo => todo.ref.send(\"SET_ACTIVE\"));\n      }\n    },\n    CLEAR_COMPLETED: {\n      actions: assign({\n        todos: ctx => ctx.todos.filter(todo => !todo.completed)\n      })\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Alex/react-componentes-e-projetos-diversos/todo-xstate-nextjs/components/todosMachine.js"],"names":["Machine","assign","spawn","uuid","todoMachine","createTodo","title","id","completed","todosMachine","context","todo","todos","initial","states","initializing","entry","ctx","e","map","ref","withContext","on","all","active","actions","value","newTodo","trim","concat","cond","length","filter","forEach","send","CLEAR_COMPLETED"],"mappings":"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","sourcesContent":["import { Machine, assign, spawn } from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport { todoMachine } from \"./todoMachine\";\n\nconst createTodo = title => {\n\treturn {\n\t\tid: uuid(),\n\t\ttitle: title,\n\t\tcompleted: false\n\t};\n};\n\nexport const todosMachine = Machine({\n\tid: \"todos\",\n\tcontext: {\n\t\ttodo: \"\", // new todo\n\t\ttodos: []\n\t},\n\tinitial: \"initializing\",\n\tstates: {\n\t\tinitializing: {\n\t\t\tentry: assign({\n\t\t\t\ttodos: (ctx, e) => {\n\t\t\t\t\treturn ctx.todos.map(todo => ({\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tref: spawn(todoMachine.withContext(todo))\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}),\n\t\t\ton: {\n\t\t\t\t\"\": \"all\"\n\t\t\t}\n\t\t},\n\t\tall: {},\n\t\tactive: {},\n\t\tcompleted: {}\n\t},\n\ton: {\n\t\t\"NEWTODO.CHANGE\": {\n\t\t\tactions: assign({\n\t\t\t\ttodo: (ctx, e) => e.value\n\t\t\t})\n\t\t},\n\t\t\"NEWTODO.COMMIT\": {\n\t\t\tactions: [\n\t\t\t\tassign({\n\t\t\t\t\ttodo: \"\", // clear todo\n\t\t\t\t\ttodos: (ctx, e) => {\n\t\t\t\t\t\tconst newTodo = createTodo(e.value.trim());\n\t\t\t\t\t\treturn ctx.todos.concat({\n\t\t\t\t\t\t\t...newTodo,\n\t\t\t\t\t\t\tref: spawn(todoMachine.withContext(newTodo))\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\t\"persist\"\n\t\t\t],\n\t\t\tcond: (ctx, e) => e.value.trim().length\n\t\t},\n\t\t\"TODO.COMMIT\": {\n\t\t\tactions: [\n\t\t\t\tassign({\n\t\t\t\t\ttodos: (ctx, e) =>\n\t\t\t\t\t\tctx.todos.map(todo => {\n\t\t\t\t\t\t\treturn todo.id === e.todo.id\n\t\t\t\t\t\t\t\t? { ...todo, ...e.todo, ref: todo.ref }\n\t\t\t\t\t\t\t\t: todo;\n\t\t\t\t\t\t})\n\t\t\t\t}),\n\t\t\t\t\"persist\"\n\t\t\t]\n\t\t},\n\t\t\"TODO.DELETE\": {\n\t\t\tactions: [\n\t\t\t\tassign({\n\t\t\t\t\ttodos: (ctx, e) => ctx.todos.filter(todo => todo.id !== e.id)\n\t\t\t\t}),\n\t\t\t\t\"persist\"\n\t\t\t]\n\t\t},\n\t\t\"SHOW.all\": \".all\",\n\t\t\"SHOW.active\": \".active\",\n\t\t\"SHOW.completed\": \".completed\",\n\t\t\"MARK.completed\": {\n\t\t\tactions: ctx => {\n\t\t\t\tctx.todos.forEach(todo => todo.ref.send(\"SET_COMPLETED\"));\n\t\t\t}\n\t\t},\n\t\t\"MARK.active\": {\n\t\t\tactions: ctx => {\n\t\t\t\tctx.todos.forEach(todo => todo.ref.send(\"SET_ACTIVE\"));\n\t\t\t}\n\t\t},\n\t\tCLEAR_COMPLETED: {\n\t\t\tactions: assign({\n\t\t\t\ttodos: ctx => ctx.todos.filter(todo => !todo.completed)\n\t\t\t})\n\t\t}\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}