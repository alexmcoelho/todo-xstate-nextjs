{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Machine, actions, spawn } from \"xstate\";\nimport uuid from \"uuid-v4\";\nimport { todoMachine } from \"./todoMachine\";\nconst {\n  assign\n} = actions;\n\nconst createTodo = title => {\n  return {\n    id: uuid(),\n    title: title,\n    completed: false\n  };\n};\n\nexport const todosMachine = Machine({\n  id: \"todos\",\n  context: {\n    todo: \"\",\n    // new todo\n    todos: []\n  },\n  initial: \"all\",\n  states: {\n    all: {},\n    active: {},\n    completed: {}\n  },\n  on: {\n    \"NEWTODO.CHANGE\": {\n      actions: assign({\n        todo: (ctx, e) => e.value\n      })\n    },\n    \"NEWTODO.COMMIT\": {\n      actions: [assign({\n        todo: \"\",\n        // clear todo\n        todos: (ctx, e) => ctx.todos.concat(spawn(todoMachine.withContext(createTodo(e.value.trim()))))\n      }), \"persist\"],\n      cond: (ctx, e) => e.value.trim().length\n    },\n    \"TODO.COMMIT\": {\n      actions: [assign({\n        todos: (ctx, e) => ctx.todos.map(todo => todo.id === e.todo.id ? e.todo : todo)\n      }), \"persist\"]\n    },\n    \"TODO.DELETE\": {\n      actions: assign({\n        todos: (ctx, e) => {\n          return ctx.todos.filter(todo => todo.id !== e.id);\n        }\n      })\n    },\n    \"SHOW.all\": \".all\",\n    \"SHOW.active\": \".active\",\n    \"SHOW.completed\": \".completed\",\n    \"MARK.completed\": {\n      actions: assign({\n        todos: ctx => ctx.todos.map(todo => _objectSpread(_objectSpread({}, todo), {}, {\n          completed: true\n        }))\n      })\n    },\n    \"MARK.active\": {\n      actions: assign({\n        todos: ctx => ctx.todos.map(todo => _objectSpread(_objectSpread({}, todo), {}, {\n          completed: false\n        }))\n      })\n    },\n    CLEAR_COMPLETED: {\n      actions: assign({\n        todos: ctx => ctx.todos.filter(todo => !todo.completed)\n      })\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Alex/react-componentes-e-projetos-diversos/todo-xstate-nextjs/components/todosMachine.js"],"names":["Machine","actions","spawn","uuid","todoMachine","assign","createTodo","title","id","completed","todosMachine","context","todo","todos","initial","states","all","active","on","ctx","e","value","concat","withContext","trim","cond","length","map","filter","CLEAR_COMPLETED"],"mappings":"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","sourcesContent":["import { Machine, actions, spawn } from \"xstate\";\r\nimport uuid from \"uuid-v4\";\r\nimport { todoMachine } from \"./todoMachine\";\r\nconst { assign } = actions;\r\n\r\nconst createTodo = title => {\r\n  return {\r\n    id: uuid(),\r\n    title: title,\r\n    completed: false\r\n  };\r\n};\r\n\r\nexport const todosMachine = Machine({\r\n  id: \"todos\",\r\n  context: {\r\n    todo: \"\", // new todo\r\n    todos: []\r\n  },\r\n  initial: \"all\",\r\n  states: {\r\n    all: {},\r\n    active: {},\r\n    completed: {}\r\n  },\r\n  on: {\r\n    \"NEWTODO.CHANGE\": {\r\n      actions: assign({\r\n        todo: (ctx, e) => e.value\r\n      })\r\n    },\r\n    \"NEWTODO.COMMIT\": {\r\n      actions: [\r\n        assign({\r\n          todo: \"\", // clear todo\r\n          todos: (ctx, e) =>\r\n            ctx.todos.concat(\r\n              spawn(todoMachine.withContext(createTodo(e.value.trim())))\r\n            )\r\n        }),\r\n        \"persist\"\r\n      ],\r\n      cond: (ctx, e) => e.value.trim().length\r\n    },\r\n    \"TODO.COMMIT\": {\r\n      actions: [\r\n        assign({\r\n          todos: (ctx, e) =>\r\n            ctx.todos.map(todo => (todo.id === e.todo.id ? e.todo : todo))\r\n        }),\r\n        \"persist\"\r\n      ]\r\n    },\r\n    \"TODO.DELETE\": {\r\n      actions: assign({\r\n        todos: (ctx, e) => {\r\n          return ctx.todos.filter(todo => todo.id !== e.id);\r\n        }\r\n      })\r\n    },\r\n    \"SHOW.all\": \".all\",\r\n    \"SHOW.active\": \".active\",\r\n    \"SHOW.completed\": \".completed\",\r\n    \"MARK.completed\": {\r\n      actions: assign({\r\n        todos: ctx => ctx.todos.map(todo => ({ ...todo, completed: true }))\r\n      })\r\n    },\r\n    \"MARK.active\": {\r\n      actions: assign({\r\n        todos: ctx => ctx.todos.map(todo => ({ ...todo, completed: false }))\r\n      })\r\n    },\r\n    CLEAR_COMPLETED: {\r\n      actions: assign({\r\n        todos: ctx => ctx.todos.filter(todo => !todo.completed)\r\n      })\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}